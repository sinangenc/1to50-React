{"version":3,"sources":["components/Square.js","components/GameBoard.js","components/CurrentNumber.js","components/Timer.js","components/InfoField.js","utils/Utils.js","components/FinishMessage.js","components/RestartButton.js","App.js","reportWebVitals.js","index.js"],"names":["Square","content","this","props","value","className","onClick","handleOnclick","React","Component","GameBoard","n","number","numbers","isFound","squareArray","i","item","getNthNumber","push","handleSquareOnclick","CurrentNumber","currentNumber","Timer","time","InfoField","elapsedTime","shuffleArray","array","length","randomIndex","Math","floor","random","createNumbersArray","firstPart","secondPart","concat","FinishMessage","RestartButton","App","state","isBoardActive","bind","updateElapsedTime","restartGame","timer","setInterval","setState","oldState","clearInterval","tmpText","second","substr","clickedNumber","startGame","endGame","map","getElapsedTime","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3e2ae8d3.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Square extends React.Component{\r\n\r\n    render() {\r\n        let content;\r\n\r\n        // If props.value not null, display a square\r\n        if (this.props.value){\r\n            const className = (this.props.value <= 25) ? \"Square light\" : \"Square dark\";\r\n\r\n            content = <div className={className} onClick={() => this.props.handleOnclick(this.props.value)}>\r\n                {this.props.value}\r\n            </div>;\r\n        }else {\r\n            content = <div className=\"Square disabled\"/>;\r\n        }\r\n\r\n        return (\r\n            content\r\n        );\r\n    }\r\n}\r\nexport default Square;","import React from 'react';\r\nimport Square from \"./Square\";\r\n\r\nclass GameBoard extends React.Component{\r\n\r\n    getNthNumber(n){\r\n        let number = null;\r\n\r\n        // If n.th number between 1-25 is not found, take it\r\n        if(!this.props.numbers[n].isFound){\r\n            number = this.props.numbers[n];\r\n        }\r\n        else if(!this.props.numbers[n + 25].isFound){\r\n            // If (n+25).th number is not found, take it\r\n            number = this.props.numbers[n + 25];\r\n        }\r\n\r\n        return number;\r\n    }\r\n\r\n    render() {\r\n        // Define a variable to store squares\r\n        const squareArray = [];\r\n\r\n        // Determine 25 numbers to be displayed\r\n        for (let i = 0; i < 25; i++){\r\n            const item = this.getNthNumber(i);\r\n\r\n            if(item){\r\n                squareArray.push(\r\n                    <Square\r\n                        key={i}\r\n                        value={item.value}\r\n                        handleOnclick={this.props.handleSquareOnclick}\r\n                    />\r\n                );\r\n            }else {\r\n                squareArray.push(\r\n                    <Square\r\n                        key={i}\r\n                        value=\"\"\r\n                    />\r\n                );\r\n            }\r\n\r\n        }\r\n\r\n        return(\r\n            <div className=\"GameBoard\">\r\n                {squareArray}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GameBoard;","import React from \"react\";\r\n\r\nclass CurrentNumber extends React.Component{\r\n    render() {\r\n        return(\r\n            <div className=\"CurrentNumber\">\r\n                <span className=\"text\"><span className=\"hideSmallScreen\">Current</span> Number</span>\r\n                <div className=\"block\">{this.props.currentNumber}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CurrentNumber;","import React from \"react\";\r\n\r\nclass Timer extends React.Component{\r\n    render() {\r\n        return(\r\n            <div className=\"Timer\">\r\n                <span className=\"text\">Elapsed Time</span>\r\n                <div className=\"block\">{this.props.time}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Timer;","import CurrentNumber from \"./CurrentNumber\";\r\nimport Timer from \"./Timer\";\r\n\r\nfunction InfoField(props) {\r\n    return (\r\n        <div className=\"InfoField clearfix\">\r\n            <CurrentNumber currentNumber={props.currentNumber} />\r\n            <Timer time={props.elapsedTime} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default InfoField;","/**\r\n * Shuffles the given array randomly <br/>\r\n * using the Fisherâ€“Yates algorithm\r\n * @param array\r\n */\r\nexport const shuffleArray = (array) => {\r\n    for(let i = 0; i < array.length; i++){\r\n        // Get a random index\r\n        let randomIndex = Math.floor( Math.random() * (i + 1) );\r\n\r\n        // Swap elements\r\n        [array[i], array[randomIndex]] = [array[randomIndex], array[i]];\r\n    }\r\n}\r\n\r\n/**\r\n * Creates an array of numbers in the given range\r\n */\r\nexport const createNumbersArray = () => {\r\n    // Create temporary arrays\r\n    const firstPart = [];   // For 1-25\r\n    const secondPart = [];  // For 26-50\r\n\r\n    // Fill the partial arrays\r\n    for(let i = 1; i <= 25; i++){\r\n        firstPart.push({\r\n            value: i,\r\n            isFound:false\r\n        });\r\n\r\n        secondPart.push({\r\n            value: 25 + i,\r\n            isFound:false\r\n        });\r\n    }\r\n\r\n    // Shuffle arrays\r\n    shuffleArray(firstPart);\r\n    shuffleArray(secondPart);\r\n\r\n    // Merge partial arrays and return it\r\n    return firstPart.concat(secondPart);\r\n}","function FinishMessage(props) {\r\n    return(\r\n        <div className=\"FinishMessage\">\r\n            <h2>Congratulations!</h2>\r\n            <h3>You have completed the game. Your Score:</h3>\r\n            <h2 className=\"Score\">{100 - props.elapsedTime}</h2>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FinishMessage;","function RestartButton(props) {\r\n    return (\r\n        <div className=\"RestartButton\" onClick={props.onClick}>\r\n            Restart Game\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RestartButton;","import './App.css';\r\nimport React from 'react';\r\nimport GameBoard from \"./components/GameBoard\";\r\nimport InfoField from \"./components/InfoField\";\r\nimport {createNumbersArray} from \"./utils/Utils\";\r\nimport FinishMessage from \"./components/FinishMessage\";\r\nimport RestartButton from \"./components/RestartButton\";\r\n\r\n\r\n//TODO: Ranking\r\n\r\n\r\nclass App extends React.Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // Get numbers as shuffled list\r\n        const numbers = createNumbersArray();\r\n\r\n        // Set state\r\n        this.state = {\r\n            currentNumber: 1,\r\n            numbers: numbers,\r\n            elapsedTime: 0,\r\n            isBoardActive: true\r\n        }\r\n\r\n        // Binding this\r\n        this.handleSquareOnclick = this.handleSquareOnclick.bind(this);\r\n        this.updateElapsedTime = this.updateElapsedTime.bind(this);\r\n        this.restartGame = this.restartGame.bind(this);\r\n    }\r\n\r\n    startGame(){\r\n        this.timer = setInterval( this.updateElapsedTime, 10);\r\n    }\r\n\r\n    updateElapsedTime(){\r\n        this.setState((oldState) => {\r\n            return {\r\n                elapsedTime: oldState.elapsedTime + 10,\r\n            };\r\n        });\r\n    }\r\n\r\n    endGame(){\r\n        this.setState({\r\n            isBoardActive: false,\r\n        });\r\n\r\n        clearInterval(this.timer);\r\n    }\r\n\r\n    restartGame(){\r\n        clearInterval(this.timer);\r\n\r\n        this.setState({\r\n            currentNumber: 1,\r\n            numbers: createNumbersArray(),\r\n            elapsedTime: 0,\r\n            isBoardActive: true\r\n        });\r\n    }\r\n\r\n    getElapsedTime(){\r\n        // Convert to String\r\n        const tmpText = \"\" + this.state.elapsedTime;\r\n\r\n        // Get first part of string (except from last 3 digits)\r\n        const second = tmpText.substr(0, tmpText.length - 3);\r\n\r\n        return ( second ? second : 0) + \".\" + tmpText.substr(tmpText.length - 3);\r\n    }\r\n\r\n    handleSquareOnclick(clickedNumber){\r\n        //console.log(\"Clicked:\", clickedNumber);\r\n\r\n        // If current number clicked, set it as found\r\n        // increase current number\r\n        if(this.state.currentNumber === clickedNumber){\r\n\r\n            // If clickedNumber == 1, start the counter\r\n            if(clickedNumber === 1){\r\n                this.startGame();\r\n            }\r\n            else if(clickedNumber === 50){\r\n                // If clickedNumber == 50, stop the counter\r\n                this.endGame();\r\n            }\r\n\r\n            this.setState((oldState) => {\r\n                // Iterate numbers and update isFound value of clicked number\r\n                const numbers = oldState.numbers.map((item) => {\r\n                    if(item.value === clickedNumber){\r\n                        item.isFound = true;\r\n                    }\r\n                    return item;\r\n                });\r\n\r\n                // find net value of currentNumber\r\n                const nextNumber = (oldState.currentNumber < 50) ? oldState.currentNumber + 1 : oldState.currentNumber;\r\n\r\n                return {\r\n                    currentNumber: nextNumber,\r\n                    numbers: numbers,\r\n                };\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return(\r\n            <div className=\"App\">\r\n                <InfoField\r\n                    elapsedTime={this.getElapsedTime()}\r\n                    currentNumber={this.state.currentNumber}\r\n                />\r\n\r\n                {this.state.isBoardActive ?\r\n                    <GameBoard\r\n                        numbers={this.state.numbers}\r\n                        handleSquareOnclick={this.handleSquareOnclick}\r\n                    />\r\n                    :\r\n                    <FinishMessage\r\n                        elapsedTime={this.getElapsedTime()}\r\n                    />\r\n                }\r\n\r\n                <RestartButton onClick={this.restartGame} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}